require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe WalletsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Wallet. As you add validations to Wallet, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      private_key: 'RANDOMHASH',
      public_key: 'ANOTHERRANDOM HASH',
      name: "BEN"
    }
  }

  let(:invalid_attributes) {
    {
      private_key: '',
      public_key: ''
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # WalletsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all wallets as @wallets" do
      wallet = create(:wallet)
      get :index, {}, valid_session
      expect(assigns(:wallets)).to eq([wallet])
    end
  end

  describe "GET #show" do
    it "assigns the requested wallet as @wallet" do
     wallet = create(:wallet)
      get :show, {:id => wallet.to_param}, valid_session
      expect(assigns(:wallet)).to eq(wallet)
    end
  end

  describe "GET #new" do
    it "assigns a new wallet as @wallet" do
      get :new, {}, valid_session
      expect(assigns(:wallet)).to be_a_new(Wallet)
    end
  end

  describe "GET #edit" do
    it "assigns the requested wallet as @wallet" do
     wallet = create(:wallet)
      get :edit, {:id => wallet.to_param}, valid_session
      expect(assigns(:wallet)).to eq(wallet)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Wallet" do
        expect {
          post :create, {:wallet => valid_attributes}, valid_session
        }.to change(Wallet, :count).by(1)
      end

      it "assigns a newly created wallet as @wallet" do
        post :create, {:wallet => valid_attributes}, valid_session
        expect(assigns(:wallet)).to be_a(Wallet)
        expect(assigns(:wallet)).to be_persisted
      end

      it "redirects to the created wallet" do
        post :create, {:wallet => attributes_for(:wallet)}, valid_session
        expect(response).to redirect_to(Wallet.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved wallet as @wallet" do
        post :create, {:wallet => invalid_attributes}, valid_session
        expect(assigns(:wallet)).to be_a_new(Wallet)
      end

      it "re-renders the 'new' template" do
        post :create, {:wallet => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested wallet" do
        wallet = create(:wallet)
        put :update, {:id => wallet.to_param, :wallet => { name: "UPDATE TEST"}}, valid_session
        wallet.reload
        expect(wallet.name).to eq("UPDATE TEST")
      end

      it "assigns the requested wallet as @wallet" do
       wallet = create(:wallet)
        put :update, {:id => wallet.to_param, :wallet => valid_attributes}, valid_session
        expect(assigns(:wallet)).to eq(wallet)
      end

      it "redirects to the wallet" do
       wallet = create(:wallet)
        put :update, {:id => wallet.to_param, :wallet => valid_attributes}, valid_session
        expect(response).to redirect_to(wallet)
      end
    end

    context "with invalid params" do
      it "assigns the wallet as @wallet" do
        wallet = create(:wallet)
        put :update, {:id => wallet.to_param, :wallet => invalid_attributes}, valid_session
        expect(assigns(:wallet)).to eq(wallet)
      end

      it "re-renders the 'edit' template" do
       wallet = create(:wallet)
        put :update, {:id => wallet.to_param, :wallet => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested wallet" do
      wallet = create(:wallet)
      expect {
        delete :destroy, {:id => wallet.to_param}, valid_session
      }.to change(Wallet, :count).by(-1)
    end

    it "redirects to the wallets list" do
      wallet = create(:wallet)
      delete :destroy, {:id => wallet.to_param}, valid_session
      expect(response).to redirect_to(wallets_url)
    end
  end

  describe "POST #send" do
    before(:each) do
      # Setup wallet with stuff to spend
      test_key = ["38881e8ffea9cb2104562b7ebfb6a5de4c2b22929454a5f57361a14187c28e20", "04b47769b1f0284a3be1256c5458222547612028db9c218b9fe544a6ea49b6f553dd72fa169d15fa6bfcb8753f26c0bc5045b5b5788e621a0489580d1fe26b569b"]
      @wallet = create(:wallet, private_key: test_key[0], public_key: test_key[1])
      @address = create(:address, wallet: @wallet, val: Bitcoin::pubkey_to_address(test_key[1]))
      output_1 = create(:unspent_output, value: 10000, address: @address)
      output_2 = create(:unspent_output, value: 20000, address: @address)
      trans = create(:transaction, unique_hash: "6f8ecad2cd68d40d4ce742bd3085b497f997c436b6fbf95a0081dee489a708ab")
      output_3 = create(:unspent_output, value: 30000, address: @address, owner_transaction: trans)
    end

    it "Creates a new transaction" do

      amount = 0.000015
      tx_fee = 0.000001
      rounded_amount = 0.00002
      send_address = "2Mxp4Qom7bSB4tBADBjKUqqextETC9tsozZ"

      expect {
        post :send_bitcoins, {
          :id => @wallet.id, 
          :amount => amount, 
          :tx_fee => tx_fee, 
          :rounded_amount => rounded_amount,
          :send_address => send_address
        }, valid_session

        expect(response).to redirect_to(@wallet)
      }.to change(Transaction, :count).by(1)
      
    end
    it "Creates a reduces available spend by amount"
    it "Links spend output to transaction"
    it "rejects payment when we don't have enough bitcoins"
  end

  # describe "#create_outputs" do
  #   it "should return three outputs" do
  #     # Testing private method
  #     WalletsController.send(:public, *WalletsController.private_instance_methods)
      
  #     w = WalletsController.new

      
  #     send_amount = 1234000
  #     round_up_amount = 66000
  #     fee = 1000
  #     result = w.create_outputs(send_amount,round_up_amount,fee)

  #     expect(result.class).to eq(Array)
  #     expect(result.length).to eq(3)
  #   end
  # end
end
